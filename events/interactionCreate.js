const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const https = require('https');

module.exports = {
    name: 'interactionCreate',
    async execute(interaction, state) {
        if (interaction.isCommand()) {
            const command = interaction.client.commands.get(interaction.commandName);
            if (!command) return;

            try {
                await command.execute(interaction, state);
            } catch (error) {
                console.error(error);
                await interaction.reply({ 
                    content: '–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!',
                    ephemeral: true
                });
            }
            return;
        }

        if (interaction.isModalSubmit()) {
            if (interaction.customId === 'delivery-modal') {
                const date = interaction.fields.getTextInputValue('date');
                const time = interaction.fields.getTextInputValue('time');
                const driver = interaction.fields.getTextInputValue('driver');

                if (!state.deliveryChannelId) {
                    await interaction.reply({ 
                        content: '–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—É–∫–∞–Ω–∞–ª–ø–æ—Å—Ç–∞–≤–æ–∫',
                        ephemeral: true
                    });
                    return;
                }

                const deliveryChannel = await interaction.client.channels.fetch(state.deliveryChannelId);
                if (!deliveryChannel) {
                    await interaction.reply({ 
                        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.',
                        ephemeral: true
                    });
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üöõ –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞')
                    .setColor('#FF5733')
                    .setDescription(state.deliveryTag ? state.deliveryTag.toString() : ' ')
                    .addFields(
                        { 
                            name: 'üìÖ –î–∞—Ç–∞',
                            value: `\`${date}\``,
                            inline: true
                        },
                        { 
                            name: '‚è∞ –í—Ä–µ–º—è',
                            value: `\`${time}\``,
                            inline: true
                        },
                        { 
                            name: '\u200B',
                            value: '\u200B',
                            inline: true
                        },
                        { 
                            name: 'üöö –í–æ–¥–∏—Ç–µ–ª—å',
                            value: `\`${driver}\``,
                            inline: true
                        },
                        { 
                            name: 'üéØ –ü–µ—Ä–µ—Ö–≤–∞—Ç',
                            value: '\`–ù–µ –≤—ã–±—Ä–∞–Ω–æ\`',
                            inline: true
                        }
                    )
                    .setTimestamp()
                    .setFooter({ 
                        text: 'Meta Delivery System',
                        iconURL: interaction.client.user.displayAvatarURL()
                    });

                const buttons = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('vagos')
                            .setLabel('Vagos')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('üü®'),
                        new ButtonBuilder()
                            .setCustomId('ballas')
                            .setLabel('Ballas')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('üü™'),
                        new ButtonBuilder()
                            .setCustomId('marabunta')
                            .setLabel('Marabunta')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('üü¶'),
                        new ButtonBuilder()
                            .setCustomId('famillies')
                            .setLabel('Famillies')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('üü©'),
                        new ButtonBuilder()
                            .setCustomId('bloods')
                            .setLabel('Bloods')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('üü•')
                    );

                const reportButton = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('report')
                            .setLabel('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
                            .setStyle(ButtonStyle.Success)
                            .setEmoji('üìù')
                    );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª Discord
                const deliveryMessage = await deliveryChannel.send({
                    embeds: [embed],
                    components: [buttons, reportButton]
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
                console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏:', interaction.user.tag);
                state.addDelivery(deliveryMessage.id, interaction.user);

                // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
                if (state.webhookUrl) {
                    try {
                        const webhookBody = {
                            embeds: [embed.toJSON()],
                            username: 'Meta Delivery System',
                            avatar_url: interaction.client.user.displayAvatarURL()
                        };

                        const data = JSON.stringify(webhookBody);
                        const webhookUrlObj = new URL(state.webhookUrl);

                        const options = {
                            hostname: webhookUrlObj.hostname,
                            path: webhookUrlObj.pathname + webhookUrlObj.search,
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Content-Length': Buffer.byteLength(data)
                            }
                        };

                        const req = https.request(options, (res) => {
                            let responseData = '';
                            res.on('data', (chunk) => {
                                responseData += chunk;
                            });
                            res.on('end', () => {
                                if (res.statusCode !== 204) {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', res.statusCode, responseData);
                                }
                            });
                        });

                        req.on('error', (error) => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
                        });

                        req.write(data);
                        req.end();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
                    }
                }

                await interaction.reply({ 
                    content: '–ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!',
                    ephemeral: true
                });
                return;
            }

            if (interaction.customId === 'report-modal') {
                const result = interaction.fields.getTextInputValue('result');
                const mats = interaction.fields.getTextInputValue('mats');
                const video = interaction.fields.getTextInputValue('video');

                if (!state.reportChannelId) {
                    await interaction.reply({ 
                        content: '–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—É–∫–∞–Ω–∞–ª–æ—Ç—á–µ—Ç–∞–ø–æ—Å—Ç–∞–≤–æ–∫',
                        ephemeral: true
                    });
                    return;
                }

                const reportChannel = await interaction.client.channels.fetch(state.reportChannelId);
                if (!reportChannel) {
                    await interaction.reply({ 
                        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.',
                        ephemeral: true
                    });
                    return;
                }

                const originalEmbed = interaction.message.embeds[0];
                const reportEmbed = new EmbedBuilder()
                    .setTitle('üìä –û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç–∞–≤–∫–µ')
                    .setColor('#00FF00')
                    .setDescription('–ò—Ç–æ–≥–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:')
                    .addFields(
                        { 
                            name: 'üìÖ –î–∞—Ç–∞',
                            value: originalEmbed.fields[0].value,
                            inline: true
                        },
                        { 
                            name: '‚è∞ –í—Ä–µ–º—è',
                            value: originalEmbed.fields[1].value,
                            inline: true
                        },
                        { 
                            name: '\u200B',
                            value: '\u200B',
                            inline: true
                        },
                        { 
                            name: 'üöö –í–æ–¥–∏—Ç–µ–ª—å',
                            value: originalEmbed.fields[3].value,
                            inline: true
                        },
                        { 
                            name: 'üéØ –ü–µ—Ä–µ—Ö–≤–∞—Ç',
                            value: originalEmbed.fields[4].value,
                            inline: true
                        },
                        { 
                            name: '\u200B',
                            value: '\u200B',
                            inline: true
                        },
                        { 
                            name: 'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç',
                            value: `\`${result}\``,
                            inline: true
                        },
                        { 
                            name: 'üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
                            value: `\`${mats}\``,
                            inline: true
                        },
                        { 
                            name: '\u200B',
                            value: '\u200B',
                            inline: true
                        }
                    );

                if (video) {
                    reportEmbed.addFields({
                        name: 'üé• –í–∏–¥–µ–æ',
                        value: video,
                        inline: false
                    });
                }

                reportEmbed.setTimestamp()
                    .setFooter({ 
                        text: 'Meta Delivery System',
                        iconURL: interaction.client.user.displayAvatarURL()
                    });

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞—Ç–∞
                const rollbackButton = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('rollback')
                            .setLabel('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫–∞—Ç')
                            .setStyle(ButtonStyle.Danger)
                            .setEmoji('üé•')
                    );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                const reportMessage = await reportChannel.send({
                    embeds: [reportEmbed],
                    components: [rollbackButton]
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
                state.addReport(reportMessage.id, {
                    messageId: interaction.message.id,
                    embed: reportEmbed
                });

                await interaction.update({
                    content: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                    components: []
                });
                return;
            }
        }

        if (interaction.isButton()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
            if (interaction.customId.startsWith('role-')) {
                try {
                    const factionId = interaction.customId.replace('role-', '');
                    console.log('–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ä–æ–ª—å –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏:', factionId);
                    
                    const roleId = state.rolesManager.getRole(factionId);
                    console.log('–ù–∞–π–¥–µ–Ω ID —Ä–æ–ª–∏:', roleId);

                    if (!roleId) {
                        console.log('–†–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏:', factionId);
                        await interaction.reply({
                            content: `–†–æ–ª—å –¥–ª—è ${factionId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /—É—Ä–æ${factionId}`,
                            ephemeral: true
                        });
                        return;
                    }

                    const role = await interaction.guild.roles.fetch(roleId);
                    console.log('–ü–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å –∏–∑ Discord:', role?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    
                    if (!role) {
                        await interaction.reply({
                            content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å –¥–ª—è ${factionId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /—É—Ä–æ${factionId}`,
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                    const bot = interaction.guild.members.cache.get(interaction.client.user.id);
                    if (!bot.permissions.has('ManageRoles')) {
                        await interaction.reply({
                            content: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞.',
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–∏ –±–æ—Ç–∞
                    const botRole = bot.roles.highest;
                    if (botRole.position <= role.position) {
                        await interaction.reply({
                            content: '–†–æ–ª—å –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –≤—ã–¥–∞–≤–∞–µ–º–æ–π —Ä–æ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (interaction.member.roles.cache.has(roleId)) {
                        // –ï—Å–ª–∏ —Ä–æ–ª—å —É–∂–µ –µ—Å—Ç—å, —É–¥–∞–ª—è–µ–º –µ—ë
                        await interaction.member.roles.remove(roleId);
                        await interaction.reply({
                            content: `–†–æ–ª—å ${role.name} –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞.`,
                            ephemeral: true
                        });
                    } else {
                        // –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                        await interaction.member.roles.add(roleId);
                        await interaction.reply({
                            content: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å ${role.name}!`,
                            ephemeral: true
                        });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏:', error);
                    await interaction.reply({
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
                        ephemeral: true
                    });
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–¥—ã
            const factions = ['vagos', 'ballas', 'marabunta', 'famillies', 'bloods'];
            if (factions.includes(interaction.customId)) {
                const faction = interaction.customId;
                const roleId = state.rolesManager.getRole(faction);
                
                if (!roleId) {
                    await interaction.reply({
                        content: `–†–æ–ª—å –¥–ª—è ${faction} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—É—Ä–æ${faction}`,
                        ephemeral: true
                    });
                    return;
                }

                const role = await interaction.guild.roles.fetch(roleId);
                if (!role) {
                    await interaction.reply({
                        content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å –¥–ª—è ${faction}`,
                        ephemeral: true
                    });
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ
                const message = interaction.message;
                const embed = EmbedBuilder.from(message.embeds[0]);
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                const interceptField = embed.data.fields.find(field => field.name === 'üéØ –ü–µ—Ä–µ—Ö–≤–∞—Ç');
                if (interceptField) {
                    interceptField.value = `\`${role.name}\``;
                }

                await interaction.update({
                    embeds: [embed],
                    components: message.components
                });
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–∞
            if (interaction.customId === 'report') {
                const modal = new ModalBuilder()
                    .setCustomId('report-modal')
                    .setTitle('–û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç–∞–≤–∫–µ');

                const resultInput = new TextInputBuilder()
                    .setCustomId('result')
                    .setLabel('–†–µ–∑—É–ª—å—Ç–∞—Ç')
                    .setStyle(TextInputStyle.Short)
                    .setPlaceholder('–£—Å–ø–µ—à–Ω–æ/–ù–µ—É—Å–ø–µ—à–Ω–æ')
                    .setRequired(true);

                const matsInput = new TextInputBuilder()
                    .setCustomId('mats')
                    .setLabel('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã')
                    .setStyle(TextInputStyle.Short)
                    .setPlaceholder('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
                    .setRequired(true);

                const videoInput = new TextInputBuilder()
                    .setCustomId('video')
                    .setLabel('–í–∏–¥–µ–æ')
                    .setStyle(TextInputStyle.Short)
                    .setPlaceholder('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)')
                    .setRequired(false);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(resultInput),
                    new ActionRowBuilder().addComponents(matsInput),
                    new ActionRowBuilder().addComponents(videoInput)
                );

                await interaction.showModal(modal);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–∞—Ç–∞
            if (interaction.customId === 'rollback') {
                try {
                    const reportData = state.getReport(interaction.message.id);
                    if (!reportData) {
                        await interaction.reply({
                            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–∫–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞.',
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–∞—Ç–æ–≤
                    if (!state.rollbackChannelId) {
                        await interaction.reply({
                            content: '–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç–∫–∞—Ç–æ–≤.',
                            ephemeral: true
                        });
                        return;
                    }

                    const rollbackChannel = await interaction.client.channels.fetch(state.rollbackChannelId);
                    if (!rollbackChannel) {
                        await interaction.reply({
                            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–∞—Ç–æ–≤! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.',
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    const modRoleId = state.rolesManager.getRole('moders');
                    if (!modRoleId) {
                        await interaction.reply({
                            content: '–†–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—É—Ä–æmoders',
                            ephemeral: true
                        });
                        return;
                    }

                    const modRole = await interaction.guild.roles.fetch(modRoleId);
                    if (!modRole) {
                        await interaction.reply({
                            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞',
                            ephemeral: true
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    if (!interaction.member.roles.cache.has(modRoleId)) {
                        await interaction.reply({
                            content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–∞—Ç–∞!',
                            ephemeral: true
                        });
                        return;
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–∞—Ç–∞
                    state.addRollbackRequest(interaction.user.id, {
                        messageId: interaction.message.id,
                        embed: reportData.embed
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–∞—Ç–æ–≤
                    const rollbackMessage = `${modRole} –ö—É—Ä–∞—Ç–æ—Ä ${interaction.user} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –æ—Ç–∫–∞—Ç —Å –ø–æ—Å—Ç–∞–≤–∫–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä—É!`;
                    
                    await rollbackChannel.send({
                        content: rollbackMessage,
                        embeds: [reportData.embed]
                    });

                    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    const message = await interaction.message.fetch();
                    if (message.components && message.components.length > 0) {
                        const disabledButton = ButtonBuilder.from(message.components[0].components[0])
                            .setDisabled(true);

                        await message.edit({
                            embeds: message.embeds,
                            components: [new ActionRowBuilder().addComponents(disabledButton)]
                        });
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    await interaction.reply({
                        content: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ${rollbackChannel}!`,
                        ephemeral: true
                    });

                    // –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–∞—Ç–∞
                    state.clearRollbackRequest(interaction.user.id);

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–∞—Ç–∞:', error);
                    await interaction.reply({
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–∞—Ç–∞.',
                        ephemeral: true
                    });
                }
                return;
            }
        }
    }
};
